# Docker Compose for LOCAL DEVELOPMENT
# This exposes direct ports for development/testing
# For production deployment, use compose.yml with Caddy reverse proxy

services:
  nine-tones-app:
    build:
      context: .
      dockerfile: Dockerfile.new
    ports:
      - "3000:3000"  # Frontend React app
      - "3001:3001"  # Backend API server
    environment:
      # Production environment settings
      - NODE_ENV=production
      # Add your environment variables here
      # - REACT_APP_FIREBASE_API_KEY=your_api_key
      # - REACT_APP_FIREBASE_AUTH_DOMAIN=your_auth_domain
      # - REACT_APP_FIREBASE_PROJECT_ID=your_project_id
      # - REACT_APP_FIREBASE_STORAGE_BUCKET=your_storage_bucket
      # - REACT_APP_FIREBASE_MESSAGING_SENDER_ID=your_sender_id  
      # - REACT_APP_FIREBASE_APP_ID=your_app_id
      # - REACT_APP_API_URL=http://localhost:3001  # Base URL - frontend adds /api/rs/ to requests
      # Backend environment variables
      # - SOAP_ENDPOINT=your_rs_ge_endpoint
      # - SOAP_SU=your_username:user_id  
      # - SOAP_SP=your_password
      # - PORT=3001
      # - FRONTEND_URL=http://localhost:3000
    volumes:
      # Optional: Mount for logs or persistent data
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000", "&&", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

# Optional: Add a reverse proxy for production
# nginx:
#   image: nginx:alpine
#   ports:
#     - "80:80"
#     - "443:443"
#   volumes:
#     - ./nginx.conf:/etc/nginx/nginx.conf:ro
#   depends_on:
#     - nine-tones-app