name: 🚀 Build & Deploy to GCP VM

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  # Container Configuration
  CONTAINER_NAME: nine-tones-app
  
  # GCP Configuration
  REGION: europe-west3
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REPO: apps
  APP: nine-tones-app
  
  # VM Configuration
  VM_HOST: 34.141.45.73

jobs:
  build-push:
    name: 🏗️ Build & Push to Artifact Registry
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      IMAGE: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.APP }}
    outputs:
      image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.APP }}:${{ github.sha }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: ☁️ Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: 🐳 Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

    - name: 🔧 Create Production Environment File
      run: |
        echo "🔐 Creating production environment file..."
        cat > .env.production.local << EOF
        # Firebase Configuration (Build-time)
        REACT_APP_FIREBASE_API_KEY=${{ secrets.REACT_APP_FIREBASE_API_KEY }}
        REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
        REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
        REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
        REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
        REACT_APP_FIREBASE_APP_ID=${{ secrets.REACT_APP_FIREBASE_APP_ID }}
        
        # API Configuration (Caddy will proxy /api/* to backend)
        REACT_APP_API_URL=http://${{ env.VM_HOST }}
        
        # Build Configuration
        CI=false
        NODE_ENV=production
        EOF

    - name: 🔧 Create Backend Environment File
      run: |
        echo "🔐 Creating backend environment file..."
        cat > backend/.env.production.local << EOF
        NODE_ENV=production
        PORT=3001
        FRONTEND_URL=http://${{ env.VM_HOST }}
        EOF

    - name: 🏗️ Build & Push Docker Image
      run: |
        echo "🏗️ Building Docker image..."
        docker build \
          --build-arg NODE_ENV=production \
          --tag "${IMAGE}:${{ github.sha }}" \
          --tag "${IMAGE}:latest" \
          .
        
        echo "📤 Pushing to Artifact Registry..."
        docker push "${IMAGE}:${{ github.sha }}"
        docker push "${IMAGE}:latest"
        
        echo "✅ Build and push completed successfully"

  deploy:
    name: 🚀 Deploy to VM
    needs: build-push
    runs-on: ubuntu-latest
    
    steps:
    - name: 🚀 Deploy to VM via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.VM_HOST }}
        username: ${{ secrets.VM_SSH_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        port: 22
        script: |
          echo "🚀 Starting deployment on VM..."
          
          # Setup deployment directory
          DEPLOY_DIR="/opt/apps/nine-tones"
          sudo mkdir -p $DEPLOY_DIR
          cd $DEPLOY_DIR
          
          # Authenticate with gcloud (VM should have service account)
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
          
          # Create .env file from secrets (matching Secret Manager approach)
          echo "🔐 Creating environment file..."
          cat > .env << EOF
          NODE_ENV=production
          PORT=3001
          FRONTEND_URL=http://${{ env.VM_HOST }}
          SOAP_ENDPOINT=${{ secrets.SOAP_ENDPOINT }}
          SOAP_SU=${{ secrets.SOAP_SU }}
          SOAP_SP=${{ secrets.SOAP_SP }}
          EOF
          
          # Create Docker Compose file for the app
          cat > docker-compose.yml << 'EOF'
          version: "3.9"
          services:
            nine-tones-app:
              image: europe-west3-docker.pkg.dev/nine-tones-bots-2025-468320/apps/nine-tones-app:latest
              container_name: nine-tones-app
              restart: unless-stopped
              env_file:
                - .env
              ports:
                # Temporary direct access ports (for debugging/fallback)
                - "3000:3000" # Frontend
                - "3001:3001" # Backend API
              networks: [web]
              mem_limit: 1g
              cpus: "0.5"
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3000/"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 30s
          networks:
            web:
              external: true
          EOF
          
          # Pull latest image and update to specific commit
          echo "📥 Pulling latest image..."
          docker pull ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.APP }}:${{ github.sha }}
          
          # Tag the specific commit as latest locally
          docker tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.APP }}:${{ github.sha }} \
                     ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.APP }}:latest
          
          # Create Docker network if needed
          docker network create web 2>/dev/null || echo "Network 'web' already exists"
          
          # Deploy using Docker Compose
          echo "🚀 Starting services with Docker Compose..."
          docker compose down --remove-orphans 2>/dev/null || echo "No existing services"
          docker compose up -d
          
          echo "✅ Deployment completed successfully"

    - name: 🔍 Health Check via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.VM_HOST }}
        username: ${{ secrets.VM_SSH_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        port: 22
        script: |
          echo "🔍 Performing health check..."
          
          cd /opt/apps/nine-tones
          
          # Wait for container to start
          sleep 15
          
          # Check if container is running
          if ! docker ps | grep -q nine-tones-app; then
            echo "❌ Container is not running"
            docker logs nine-tones-app
            exit 1
          fi
          
          # Check container health status
          echo "🏥 Checking container health status..."
          for i in {1..6}; do
            health_status=$(docker inspect nine-tones-app --format='{{.State.Health.Status}}' 2>/dev/null || echo "none")
            echo "Health status attempt $i/6: $health_status"
            
            if [ "$health_status" = "healthy" ]; then
              echo "✅ Container health check passed!"
              break
            elif [ "$health_status" = "unhealthy" ]; then
              echo "❌ Container is unhealthy"
              docker logs --tail 50 nine-tones-app
              exit 1
            fi
            
            sleep 10
          done
          
          # Direct HTTP health check
          echo "🌐 Testing HTTP endpoints..."
          max_attempts=8
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "HTTP check attempt $attempt/$max_attempts..."
            
            # Test frontend (port 3000 internally)
            if docker exec nine-tones-app curl -f --connect-timeout 10 --max-time 30 http://localhost:3000/ >/dev/null 2>&1; then
              echo "✅ Frontend health check passed!"
              break
            fi
            
            if [ $attempt -eq $max_attempts ]; then
              echo "❌ HTTP health check failed after $max_attempts attempts"
              echo "Container logs:"
              docker logs --tail 50 nine-tones-app
              exit 1
            fi
            
            sleep 10
            attempt=$((attempt + 1))
          done

    - name: 📊 Deployment Summary via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.VM_HOST }}
        username: ${{ secrets.VM_SSH_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        port: 22
        script: |
          echo "📊 Deployment Summary:"
          echo "====================="
          echo "🐳 Container: nine-tones-app"
          echo "📦 Image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.APP }}:${{ github.sha }}"
          echo "🌐 Direct Frontend: http://${{ env.VM_HOST }}:3000 (for debugging)"  
          echo "🌐 Direct API: http://${{ env.VM_HOST }}:3001/api/rs/* (for debugging)"
          echo "🌐 Production URL: http://${{ env.VM_HOST }} (requires Caddy deployment)"
          echo "🔄 Deploy Caddy next for production access"
          echo "🔧 Commit: ${{ github.sha }}"
          echo "👤 Deployed by: ${{ github.actor }}"
          echo "📅 Time: $(date)"
          echo "📁 Deploy Path: /opt/apps/nine-tones"
          echo ""
          echo "🔍 Container Status:"
          docker ps --filter name=nine-tones-app --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}"
          echo ""
          echo "🏥 Health Status:"
          docker inspect nine-tones-app --format='{{.State.Health.Status}}' 2>/dev/null || echo "No health check configured"
          echo ""
          echo "💾 Resource Usage:"
          docker stats --no-stream --format "table {{.Container}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\\t{{.MemPerc}}" nine-tones-app
          echo ""
          echo "🌐 Network:"
          docker network ls --filter name=web
          echo ""
          echo "📋 Environment:"
          echo "  - NODE_ENV: production"
          echo "  - Frontend: port 3000"
          echo "  - Backend API: port 3001"
          echo "  - Memory Limit: 1GB"
          echo "  - CPU Limit: 0.5 cores"
          
          # Cleanup old images (keep last 3)
          echo ""
          echo "🧹 Cleaning up old images..."
          docker image prune -f --filter "dangling=true"