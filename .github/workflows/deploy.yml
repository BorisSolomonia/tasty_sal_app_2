name: Deploy Tasty ERP

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

concurrency:
  group: deploy-tasty-erp
  cancel-in-progress: false

env:
  APP_NAME: ${{ vars.APP_NAME || 'Tasty_Erp' }}
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID || 'nine-tones-bots-2025-468320' }}
  REGION: ${{ vars.AR_REGION || 'us-central1' }}
  REPOSITORY: ${{ vars.AR_REPO_NAME || 'tasty-ar' }}

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Debug Environment Variables
      run: |
        echo "Environment Variables Debug:"
        echo "APP_NAME: '${{ env.APP_NAME }}'"
        echo "PROJECT_ID: '${{ env.PROJECT_ID }}'"
        echo "REGION: '${{ env.REGION }}'"
        echo "REPOSITORY: '${{ env.REPOSITORY }}'"

        echo "GitHub Variables (raw):"
        echo "vars.APP_NAME: '${{ vars.APP_NAME }}'"
        echo "vars.GCP_PROJECT_ID: '${{ vars.GCP_PROJECT_ID }}'"
        echo "vars.AR_REGION: '${{ vars.AR_REGION }}'"
        echo "vars.AR_REPO_NAME: '${{ vars.AR_REPO_NAME }}'"
        echo "vars.VM_HOST: '${{ vars.VM_HOST }}'"
        echo "vars.VM_SSH_USER: '${{ vars.VM_SSH_USER }}'"

        # Check if variables are empty
        if [ -z "${{ env.REGION }}" ]; then
          echo "ERROR: REGION is empty!"
        fi
        if [ -z "${{ env.PROJECT_ID }}" ]; then
          echo "ERROR: PROJECT_ID is empty!"
        fi

    - name: Auth to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Debug GCP Configuration
      run: |
        echo "GCP Configuration Debug:"
        echo "Current Project: $(gcloud config get-value project)"
        echo "Current Account: $(gcloud config get-value account)"

        echo "Available Artifact Registry repositories:"
        gcloud artifacts repositories list --project=${{ env.PROJECT_ID }} || echo "ERROR: Failed to list repositories"

    - name: Create Artifact Registry Repository
      run: |
        echo "Creating Artifact Registry repository if it doesn't exist..."

        # Extract repository name from full path
        REPO_NAME=$(echo "${{ env.REPOSITORY }}" | sed 's|.*/||')
        echo "Repository name: $REPO_NAME"

        # Use fallback for region
        REPO_REGION="${{ env.REGION }}"
        if [ -z "$REPO_REGION" ]; then
          REPO_REGION="us-central1"
        fi

        gcloud artifacts repositories create $REPO_NAME \
          --repository-format=docker \
          --location=$REPO_REGION \
          --project=${{ env.PROJECT_ID }} \
          --description="Container images for ${{ env.APP_NAME }}" || {
          echo "INFO: Repository might already exist, continuing..."
        }

        echo "SUCCESS: Repository check/creation completed"
        echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

    - name: Configure Docker
      run: |
        echo "Configuring Docker for Artifact Registry..."

        # Use fallback if REGION is empty
        DOCKER_REGION="${{ env.REGION }}"
        if [ -z "$DOCKER_REGION" ]; then
          echo "WARNING: REGION is empty, using us-central1 as fallback"
          DOCKER_REGION="us-central1"
        fi

        echo "Docker registry: $DOCKER_REGION-docker.pkg.dev"
        gcloud auth configure-docker $DOCKER_REGION-docker.pkg.dev --quiet
        echo "SUCCESS: Docker configured for $DOCKER_REGION"

        # Store the region for later steps
        echo "DOCKER_REGION=$DOCKER_REGION" >> $GITHUB_ENV

    - name: Fetch Environment Variables
      run: |
        echo "Fetching environment from Secret Manager..."
        echo "Secret name: ${{ env.APP_NAME }}-env"
        echo "Project: ${{ env.PROJECT_ID }}"

        gcloud secrets versions access latest \
          --secret="${{ env.APP_NAME }}-env" \
          --project="${{ env.PROJECT_ID }}" > .env.production

        echo "SUCCESS: Environment variables fetched"
        echo "Variables count: $(wc -l < .env.production)"

    - name: Build and Push Docker Image
      run: |
        # Construct correct image path
        APP_NAME_LOWER=$(echo "${{ env.APP_NAME }}" | tr '[:upper:]' '[:lower:]')
        IMAGE_PATH="${{ env.DOCKER_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/$APP_NAME_LOWER"

        echo "Building Docker image..."
        echo "Image path: $IMAGE_PATH"
        echo "Tags: ${{ github.sha }}, latest"

        # Extract Firebase variables for build args
        echo "Extracting build arguments from .env.production..."
        REACT_APP_FIREBASE_API_KEY=$(grep "^REACT_APP_FIREBASE_API_KEY=" .env.production | cut -d'=' -f2- | tr -d '"' | tr -d "'")
        REACT_APP_FIREBASE_AUTH_DOMAIN=$(grep "^REACT_APP_FIREBASE_AUTH_DOMAIN=" .env.production | cut -d'=' -f2- | tr -d '"' | tr -d "'")
        REACT_APP_FIREBASE_PROJECT_ID=$(grep "^REACT_APP_FIREBASE_PROJECT_ID=" .env.production | cut -d'=' -f2- | tr -d '"' | tr -d "'")
        REACT_APP_FIREBASE_STORAGE_BUCKET=$(grep "^REACT_APP_FIREBASE_STORAGE_BUCKET=" .env.production | cut -d'=' -f2- | tr -d '"' | tr -d "'")
        REACT_APP_FIREBASE_MESSAGING_SENDER_ID=$(grep "^REACT_APP_FIREBASE_MESSAGING_SENDER_ID=" .env.production | cut -d'=' -f2- | tr -d '"' | tr -d "'")
        REACT_APP_FIREBASE_APP_ID=$(grep "^REACT_APP_FIREBASE_APP_ID=" .env.production | cut -d'=' -f2- | tr -d '"' | tr -d "'")
        REACT_APP_API_URL=$(grep "^REACT_APP_API_URL=" .env.production | cut -d'=' -f2- | tr -d '"' | tr -d "'")

        # Fallback values if extraction fails
        if [ -z "$REACT_APP_API_URL" ]; then
          echo "WARNING: REACT_APP_API_URL is empty, using fallback"
          REACT_APP_API_URL="http://35.209.56.146"
        fi

        echo "Starting Docker build..."
        if docker build \
          --progress=plain \
          --build-arg REACT_APP_FIREBASE_API_KEY="$REACT_APP_FIREBASE_API_KEY" \
          --build-arg REACT_APP_FIREBASE_AUTH_DOMAIN="$REACT_APP_FIREBASE_AUTH_DOMAIN" \
          --build-arg REACT_APP_FIREBASE_PROJECT_ID="$REACT_APP_FIREBASE_PROJECT_ID" \
          --build-arg REACT_APP_FIREBASE_STORAGE_BUCKET="$REACT_APP_FIREBASE_STORAGE_BUCKET" \
          --build-arg REACT_APP_FIREBASE_MESSAGING_SENDER_ID="$REACT_APP_FIREBASE_MESSAGING_SENDER_ID" \
          --build-arg REACT_APP_FIREBASE_APP_ID="$REACT_APP_FIREBASE_APP_ID" \
          --build-arg REACT_APP_API_URL="$REACT_APP_API_URL" \
          -t $IMAGE_PATH:${{ github.sha }} \
          -t $IMAGE_PATH:latest \
          .; then
          echo "SUCCESS: Docker build successful"
        else
          echo "ERROR: Docker build failed"
          exit 1
        fi

        echo "Pushing images..."
        docker push $IMAGE_PATH:${{ github.sha }}
        docker push $IMAGE_PATH:latest

        echo "SUCCESS: Images pushed successfully"
        echo "IMAGE_PATH=$IMAGE_PATH" >> $GITHUB_ENV

    - name: Setup VM Directories
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: "35.209.56.146"
        username: "borissolomonia"
        key: ${{ secrets.VM_SSH_KEY }}
        port: 22
        timeout: 30s
        command_timeout: 60s
        script: |
          APP_NAME="${{ env.APP_NAME }}"
          echo "Setting up directories for $APP_NAME..."

          sudo mkdir -p /opt/$APP_NAME/secure-docker-setup
          sudo mkdir -p /opt/$APP_NAME/infra/caddy/conf.d
          sudo chown -R $USER:$USER /opt/$APP_NAME

          echo "SUCCESS: VM directories ready"

    - name: Upload Files to VM
      uses: appleboy/scp-action@v0.1.7
      with:
        host: "35.209.56.146"
        username: "borissolomonia"
        key: ${{ secrets.VM_SSH_KEY }}
        port: 22
        timeout: 30s
        command_timeout: 60s
        use_insecure_cipher: false
        rm: false
        strip_components: 0
        overwrite: true
        source: "secure-docker-setup/,infra/caddy/conf.d/${{ env.APP_NAME }}.caddy"
        target: /opt/${{ env.APP_NAME }}/

    - name: Create Env File on VM
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: "35.209.56.146"
        username: "borissolomonia"
        key: ${{ secrets.VM_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 120s
        script: |
          set -e
          APP_NAME="${{ env.APP_NAME }}"
          PROJECT_ID="${{ env.PROJECT_ID }}"

          echo "Creating .env file from Secret Manager..."
          gcloud secrets versions access latest \
            --secret="$APP_NAME-env" \
            --project="$PROJECT_ID" > /tmp/raw_env

          grep -E '^[A-Za-z_][A-Za-z0-9_]*=' /tmp/raw_env > /opt/$APP_NAME/secure-docker-setup/.env || {
            echo "ERROR: No valid environment variables found!"
            exit 1
          }

          rm -f /tmp/raw_env
          echo "SUCCESS: .env file created"

    - name: Deploy Application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: "35.209.56.146"
        username: "borissolomonia"
        key: ${{ secrets.VM_SSH_KEY }}
        port: 22
        timeout: 120s
        command_timeout: 300s
        script: |
          set -e

          APP_NAME="${{ env.APP_NAME }}"
          IMAGE_PATH="${{ env.IMAGE_PATH }}"
          COMMIT_SHA="${{ github.sha }}"

          echo "Deploying $APP_NAME..."
          cd /opt/$APP_NAME

          # Update compose file
          sed -i "s|image: .*|image: $IMAGE_PATH:$COMMIT_SHA|g" secure-docker-setup/docker-compose.yml

          # Deploy
          docker compose -f secure-docker-setup/docker-compose.yml --env-file secure-docker-setup/.env pull
          docker compose -f secure-docker-setup/docker-compose.yml --env-file secure-docker-setup/.env down --remove-orphans || true
          docker rm -f nine-tones-app 2>/dev/null || true
          sleep 2
          docker compose -f secure-docker-setup/docker-compose.yml --env-file secure-docker-setup/.env up -d

          echo "Waiting for services..."
          sleep 35

          docker exec caddy-caddy-1 caddy reload --config /etc/caddy/Caddyfile || {
            sleep 5
            docker exec caddy-caddy-1 caddy reload --config /etc/caddy/Caddyfile
          }

          echo "SUCCESS: Deployment completed"

    - name: Health Check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: "35.209.56.146"
        username: "borissolomonia"
        key: ${{ secrets.VM_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 120s
        script: |
          sleep 15
          curl -f -m 10 http://localhost/ && echo "SUCCESS: Frontend OK" || echo "ERROR: Frontend FAIL"
          curl -f -m 10 http://localhost/api/health && echo "SUCCESS: Backend OK" || echo "ERROR: Backend FAIL"
