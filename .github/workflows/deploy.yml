name: 🚀 Build & Deploy to GCP VM

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  # Container Configuration
  CONTAINER_NAME: nine-tones-app
  HOST_PORT: 8087
  CONTAINER_PORT: 3000
  
  # GCP Configuration
  REGION: europe-west3
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REPO: apps
  APP: nine-tones-app
  
  # VM Configuration
  VM_HOST: 34.141.45.73

jobs:
  build-push:
    name: 🏗️ Build & Push to Artifact Registry
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      IMAGE: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.APP }}
    outputs:
      image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.APP }}:${{ github.sha }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: ☁️ Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: 🐳 Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

    - name: 🔧 Create Production Environment File
      run: |
        echo "🔐 Creating production environment file..."
        cat > .env.production.local << EOF
        # Firebase Configuration (Build-time)
        REACT_APP_FIREBASE_API_KEY=${{ secrets.REACT_APP_FIREBASE_API_KEY }}
        REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
        REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
        REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
        REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
        REACT_APP_FIREBASE_APP_ID=${{ secrets.REACT_APP_FIREBASE_APP_ID }}
        
        # API Configuration
        REACT_APP_API_URL=http://${{ env.VM_HOST }}:${{ env.HOST_PORT }}
        
        # Build Configuration
        CI=false
        NODE_ENV=production
        EOF

    - name: 🔧 Create Backend Environment File
      run: |
        echo "🔐 Creating backend environment file..."
        cat > backend/.env.production.local << EOF
        NODE_ENV=production
        PORT=3001
        FRONTEND_URL=http://${{ env.VM_HOST }}:${{ env.HOST_PORT }}
        EOF

    - name: 🏗️ Build & Push Docker Image
      run: |
        echo "🏗️ Building Docker image..."
        docker build \
          --build-arg NODE_ENV=production \
          --tag "${IMAGE}:${{ github.sha }}" \
          --tag "${IMAGE}:latest" \
          .
        
        echo "📤 Pushing to Artifact Registry..."
        docker push "${IMAGE}:${{ github.sha }}"
        docker push "${IMAGE}:latest"
        
        echo "✅ Build and push completed successfully"

  deploy:
    name: 🚀 Deploy to VM
    needs: build-push
    runs-on: ubuntu-latest
    
    steps:
    - name: 🚀 Deploy to VM via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.VM_HOST }}
        username: ${{ secrets.VM_SSH_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        port: 22
        script: |
          echo "🚀 Starting deployment on VM..."
          
          # Authenticate with gcloud (VM should have service account)
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
          
          # Stop and remove existing container
          echo "🛑 Stopping existing container..."
          docker stop ${{ env.CONTAINER_NAME }} 2>/dev/null || echo "Container not running"
          docker rm ${{ env.CONTAINER_NAME }} 2>/dev/null || echo "Container not found"
          
          # Pull latest image
          echo "📥 Pulling latest image..."
          docker pull ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.APP }}:${{ github.sha }}
          
          # Start new container
          echo "🚀 Starting new container..."
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            --restart unless-stopped \
            --publish ${{ env.HOST_PORT }}:${{ env.CONTAINER_PORT }} \
            --env NODE_ENV=production \
            --env PORT=3001 \
            --env FRONTEND_URL=http://${{ env.VM_HOST }}:${{ env.HOST_PORT }} \
            --env SOAP_ENDPOINT=${{ secrets.SOAP_ENDPOINT }} \
            --env SOAP_SU=${{ secrets.SOAP_SU }} \
            --env SOAP_SP=${{ secrets.SOAP_SP }} \
            --memory="1g" \
            --cpus="0.5" \
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.APP }}:${{ github.sha }}
          
          echo "✅ Container started successfully"

    - name: 🔍 Health Check via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.VM_HOST }}
        username: ${{ secrets.VM_SSH_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        port: 22
        script: |
          echo "🔍 Performing health check..."
          
          # Wait for container to start
          sleep 15
          
          # Check if container is running
          if ! docker ps | grep -q ${{ env.CONTAINER_NAME }}; then
            echo "❌ Container is not running"
            docker logs ${{ env.CONTAINER_NAME }}
            exit 1
          fi
          
          # Check HTTP health
          max_attempts=12
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts..."
            
            if curl -f --connect-timeout 10 --max-time 30 http://localhost:${{ env.HOST_PORT }}/ >/dev/null 2>&1; then
              echo "✅ Health check passed!"
              break
            fi
            
            if [ $attempt -eq $max_attempts ]; then
              echo "❌ Health check failed after $max_attempts attempts"
              echo "Container logs:"
              docker logs --tail 50 ${{ env.CONTAINER_NAME }}
              exit 1
            fi
            
            sleep 10
            attempt=$((attempt + 1))
          done

    - name: 📊 Deployment Summary via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.VM_HOST }}
        username: ${{ secrets.VM_SSH_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        port: 22
        script: |
          echo "📊 Deployment Summary:"
          echo "====================="
          echo "🐳 Container: ${{ env.CONTAINER_NAME }}"
          echo "📦 Image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.APP }}:${{ github.sha }}"
          echo "🌐 URL: http://${{ env.VM_HOST }}:${{ env.HOST_PORT }}"
          echo "🔧 Commit: ${{ github.sha }}"
          echo "👤 Deployed by: ${{ github.actor }}"
          echo "📅 Time: $(date)"
          echo ""
          echo "🔍 Container Status:"
          docker ps --filter name=${{ env.CONTAINER_NAME }} --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}"
          echo ""
          echo "💾 Resource Usage:"
          docker stats --no-stream --format "table {{.Container}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\\t{{.MemPerc}}" ${{ env.CONTAINER_NAME }}
          
          # Cleanup old images (keep last 3)
          echo "🧹 Cleaning up old images..."
          docker image prune -f --filter "dangling=true"