name: 🚀 Deploy Tasty ERP

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

concurrency:
  group: deploy-tasty-erp
  cancel-in-progress: false

env:
  APP_NAME: ${{ vars.APP_NAME || 'Tasty_Erp' }}
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID || 'nine-tones-bots-2025-468320' }}
  REGION: ${{ vars.AR_REGION || 'us-central1' }}
  REPOSITORY: ${{ vars.AR_REPO_NAME || 'tasty-ar' }}

jobs:
  deploy:
    name: 🏗️ Build & Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔍 Debug Environment Variables
      run: |
        echo "🔍 Environment Variables Debug:"
        echo "APP_NAME: '${{ env.APP_NAME }}'"
        echo "PROJECT_ID: '${{ env.PROJECT_ID }}'"
        echo "REGION: '${{ env.REGION }}'"
        echo "REPOSITORY: '${{ env.REPOSITORY }}'"
        
        echo "🔍 GitHub Variables (raw):"
        echo "vars.APP_NAME: '${{ vars.APP_NAME }}'"
        echo "vars.GCP_PROJECT_ID: '${{ vars.GCP_PROJECT_ID }}'"
        echo "vars.AR_REGION: '${{ vars.AR_REGION }}'"
        echo "vars.AR_REPO_NAME: '${{ vars.AR_REPO_NAME }}'"
        echo "vars.VM_HOST: '${{ vars.VM_HOST }}'"
        echo "vars.VM_SSH_USER: '${{ vars.VM_SSH_USER }}'"
        
        # Check if variables are empty
        if [ -z "${{ env.REGION }}" ]; then
          echo "❌ REGION is empty!"
        fi
        if [ -z "${{ env.PROJECT_ID }}" ]; then
          echo "❌ PROJECT_ID is empty!"
        fi
    
    - name: 🔐 Auth to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: ☁️ Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: 🔍 Debug GCP Configuration
      run: |
        echo "🔍 GCP Configuration Debug:"
        echo "Current Project: $(gcloud config get-value project)"
        echo "Current Account: $(gcloud config get-value account)"
        
        echo "📦 Available Artifact Registry repositories:"
        gcloud artifacts repositories list --project=${{ env.PROJECT_ID }} || echo "❌ Failed to list repositories"
    
    - name: 🏭 Create Artifact Registry Repository (if needed)
      run: |
        echo "🏭 Creating Artifact Registry repository if it doesn't exist..."
        
        # Extract repository name from full path (in case AR_REPO_NAME still has full path)
        REPO_NAME=$(echo "${{ env.REPOSITORY }}" | sed 's|.*/||')
        echo "Repository name: $REPO_NAME"
        
        # Use fallback for region
        REPO_REGION="${{ env.REGION }}"
        if [ -z "$REPO_REGION" ]; then
          REPO_REGION="us-central1"
        fi
        
        gcloud artifacts repositories create $REPO_NAME \
          --repository-format=docker \
          --location=$REPO_REGION \
          --project=${{ env.PROJECT_ID }} \
          --description="Container images for ${{ env.APP_NAME }}" || {
          echo "ℹ️ Repository might already exist, continuing..."
        }
        
        echo "✅ Repository check/creation completed"
        echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
    
    - name: 🐳 Configure Docker
      run: |
        echo "🐳 Configuring Docker for Artifact Registry..."
        
        # Use fallback if REGION is empty
        DOCKER_REGION="${{ env.REGION }}"
        if [ -z "$DOCKER_REGION" ]; then
          echo "⚠️ REGION is empty, using us-central1 as fallback"
          DOCKER_REGION="us-central1"
        fi
        
        echo "Docker registry: $DOCKER_REGION-docker.pkg.dev"
        gcloud auth configure-docker $DOCKER_REGION-docker.pkg.dev --quiet
        echo "✅ Docker configured for $DOCKER_REGION"
        
        # Store the region for later steps
        echo "DOCKER_REGION=$DOCKER_REGION" >> $GITHUB_ENV
    
    - name: 📦 Fetch Environment Variables
      run: |
        echo "📦 Fetching environment from Secret Manager..."
        echo "Secret name: ${{ env.APP_NAME }}-env"
        echo "Project: ${{ env.PROJECT_ID }}"
        
        gcloud secrets versions access latest \
          --secret="${{ env.APP_NAME }}-env" \
          --project="${{ env.PROJECT_ID }}" > .env.production
        
        echo "✅ Environment variables fetched"
        echo "📊 Variables count: $(wc -l < .env.production)"
    
    - name: 🏗️ Build & Push Docker Image
      run: |
        # Construct correct image path using DOCKER_REGION
        IMAGE_PATH="${{ env.DOCKER_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.APP_NAME }}"
        
        echo "🏗️ Building Docker image..."
        echo "📍 Image path: $IMAGE_PATH"
        echo "📍 Tags: ${{ github.sha }}, latest"
        
        # Extract Firebase variables for build args (directly from file)
        echo "📦 Extracting build arguments from .env.production..."
        
        REACT_APP_FIREBASE_API_KEY=$(grep "^REACT_APP_FIREBASE_API_KEY=" .env.production | cut -d'=' -f2- | tr -d '"')
        REACT_APP_FIREBASE_AUTH_DOMAIN=$(grep "^REACT_APP_FIREBASE_AUTH_DOMAIN=" .env.production | cut -d'=' -f2- | tr -d '"')
        REACT_APP_FIREBASE_PROJECT_ID=$(grep "^REACT_APP_FIREBASE_PROJECT_ID=" .env.production | cut -d'=' -f2- | tr -d '"')
        REACT_APP_FIREBASE_STORAGE_BUCKET=$(grep "^REACT_APP_FIREBASE_STORAGE_BUCKET=" .env.production | cut -d'=' -f2- | tr -d '"')
        REACT_APP_FIREBASE_MESSAGING_SENDER_ID=$(grep "^REACT_APP_FIREBASE_MESSAGING_SENDER_ID=" .env.production | cut -d'=' -f2- | tr -d '"')
        REACT_APP_FIREBASE_APP_ID=$(grep "^REACT_APP_FIREBASE_APP_ID=" .env.production | cut -d'=' -f2- | tr -d '"')
        REACT_APP_API_URL=$(grep "^REACT_APP_API_URL=" .env.production | cut -d'=' -f2- | tr -d '"')
        
        echo "📊 Build args extracted:"
        echo "- REACT_APP_FIREBASE_PROJECT_ID: $REACT_APP_FIREBASE_PROJECT_ID"
        echo "- REACT_APP_API_URL: $REACT_APP_API_URL"
        
        # Update Dockerfile ports to 3004/3005
        sed -i 's/EXPOSE 3000 3001/EXPOSE 3004 3005/' Dockerfile
        sed -i 's/:3000/:3004/g' Dockerfile
        sed -i 's/:3001/:3005/g' Dockerfile
        
        docker build \
          --build-arg REACT_APP_FIREBASE_API_KEY="$REACT_APP_FIREBASE_API_KEY" \
          --build-arg REACT_APP_FIREBASE_AUTH_DOMAIN="$REACT_APP_FIREBASE_AUTH_DOMAIN" \
          --build-arg REACT_APP_FIREBASE_PROJECT_ID="$REACT_APP_FIREBASE_PROJECT_ID" \
          --build-arg REACT_APP_FIREBASE_STORAGE_BUCKET="$REACT_APP_FIREBASE_STORAGE_BUCKET" \
          --build-arg REACT_APP_FIREBASE_MESSAGING_SENDER_ID="$REACT_APP_FIREBASE_MESSAGING_SENDER_ID" \
          --build-arg REACT_APP_FIREBASE_APP_ID="$REACT_APP_FIREBASE_APP_ID" \
          --build-arg REACT_APP_API_URL="$REACT_APP_API_URL" \
          -t $IMAGE_PATH:${{ github.sha }} \
          -t $IMAGE_PATH:latest \
          .
        
        echo "📤 Pushing images..."
        docker push $IMAGE_PATH:${{ github.sha }}
        docker push $IMAGE_PATH:latest
        
        echo "✅ Images pushed successfully"
        echo "IMAGE_PATH=$IMAGE_PATH" >> $GITHUB_ENV
    
    - name: 📤 Upload Files to VM
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ vars.VM_HOST }}
        username: ${{ vars.VM_SSH_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        source: "secure-docker-setup/,infra/caddy/conf.d/${{ env.APP_NAME }}.caddy,.env.production"
        target: /opt/${{ env.APP_NAME }}/
        overwrite: true
    
    - name: 🚀 Deploy Application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ vars.VM_HOST }}
        username: ${{ vars.VM_SSH_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
          set -e
          
          APP_NAME="${{ env.APP_NAME }}"
          PROJECT_ID="${{ env.PROJECT_ID }}"
          REGION="${{ env.REGION }}"
          IMAGE_PATH="${{ env.IMAGE_PATH }}"
          COMMIT_SHA="${{ github.sha }}"
          
          echo "🚀 Deploying $APP_NAME..."
          echo "📍 Image: $IMAGE_PATH:$COMMIT_SHA"
          echo "📍 VM Host: ${{ vars.VM_HOST }}"
          
          cd /opt/$APP_NAME
          
          # Ensure .env is in place
          mv .env.production .env || true
          echo "📊 Environment variables loaded: $(wc -l < .env)"
          
          echo "🔐 Authenticating to Artifact Registry..."
          # Use the same region fallback
          DEPLOY_REGION="$REGION"
          if [ -z "$DEPLOY_REGION" ]; then
            DEPLOY_REGION="us-central1"
          fi
          gcloud auth configure-docker $DEPLOY_REGION-docker.pkg.dev --quiet
          
          echo "🌐 Ensuring Docker network exists..."
          docker network inspect web >/dev/null 2>&1 || {
            echo "🆕 Creating web network..."
            docker network create web
          }
          echo "✅ Docker network 'web' is ready"
          
          echo "📝 Updating compose file with commit SHA..."
          cd secure-docker-setup
          
          # Update image path in compose file
          sed -i "s|image: .*|image: $IMAGE_PATH:$COMMIT_SHA|g" docker-compose.secure.yml
          
          echo "📊 Current compose configuration:"
          docker compose config
          
          echo "📦 Pulling latest image..."
          docker compose pull
          
          echo "🔄 Deploying application..."
          docker compose down --remove-orphans || true
          docker compose up -d
          
          echo "⏳ Waiting for services to be healthy..."
          sleep 15
          
          echo "📊 Container status:"
          docker ps --filter "name=$APP_NAME" --format "table {{.Names}}\t{{.Status}}\t{{.Health}}\t{{.Ports}}"
          
          echo "🔧 Ensuring container is on web network..."
          docker network connect web $APP_NAME 2>/dev/null || echo "ℹ️ Container already on web network"
          
          echo "🔧 Updating Caddy configuration..."
          docker exec caddy-caddy-1 caddy reload --config /etc/caddy/Caddyfile || {
            echo "❌ Caddy reload failed, retrying..."
            sleep 5
            docker exec caddy-caddy-1 caddy reload --config /etc/caddy/Caddyfile
          }
          
          echo "✅ Deployment completed successfully!"
    
    - name: 🔍 Health Check & Tests
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ vars.VM_HOST }}
        username: ${{ vars.VM_SSH_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
          set -e
          
          APP_NAME="${{ env.APP_NAME }}"
          
          echo "🔍 Running comprehensive health checks..."
          
          # Wait for services to fully start
          echo "⏳ Waiting for services to stabilize..."
          sleep 15
          
          # VM internal checks
          echo "📍 VM internal health check:"
          curl -f -m 10 http://localhost/ && echo "✅ Frontend OK" || echo "❌ Frontend FAIL"
          curl -f -m 10 http://localhost/api/health && echo "✅ Backend API OK" || echo "❌ Backend API FAIL"
          curl -f -m 10 http://localhost/health/$APP_NAME && echo "✅ Health endpoint OK" || echo "❌ Health endpoint FAIL"
          
          # External checks
          echo "📍 External health check:"
          curl -f -m 10 http://${{ vars.VM_HOST }}/ && echo "✅ External frontend OK" || echo "❌ External frontend FAIL"
          curl -f -m 10 http://${{ vars.VM_HOST }}/api/health && echo "✅ External API OK" || echo "❌ External API FAIL"
          
          echo "📋 Application logs (last 30 lines):"
          docker logs $APP_NAME --tail 30
          
          echo "🎯 Deployment verification complete!"

    - name: ❌ Rollback on Failure
      if: failure()
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ vars.VM_HOST }}
        username: ${{ vars.VM_SSH_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
          APP_NAME="${{ env.APP_NAME }}"
          IMAGE_PATH="${{ env.IMAGE_PATH }}"
          
          echo "❌ Deployment failed, initiating rollback..."
          echo "📍 Rolling back to: $IMAGE_PATH:latest"
          
          cd /opt/$APP_NAME/secure-docker-setup
          
          # Rollback to latest tag
          sed -i "s|:${{ github.sha }}|:latest|g" docker-compose.secure.yml
          
          echo "🔄 Rolling back to previous version..."
          docker compose down
          docker compose up -d
          
          echo "🔧 Reloading Caddy..."
          docker exec caddy-caddy-1 caddy reload --config /etc/caddy/Caddyfile
          
          echo "📊 Rollback status:"
          docker ps --filter "name=$APP_NAME"
          docker logs $APP_NAME --tail 20
          
          echo "⚠️  Rollback completed - check logs for issues"